name: Build & Release

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'src/**'
      - 'src-electron/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Nueva versión (ej: 0.1.9)'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      current_version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check version change
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          elif git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
            OLD_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
            NEW_VERSION="${{ steps.version.outputs.version }}"
            if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  update-version:
    name: Update Version (Manual)
    needs: check-version
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Update package.json
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
          git push

  build:
    name: Build Windows
    needs: [check-version, update-version]
    if: always() && needs.check-version.outputs.version_changed == 'true'
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Quasar CLI
        run: npm install -g @quasar/cli

      - name: Build Quasar
        run: npm run build

      - name: Build and publish Electron (Windows)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build:electron -- --win --publish=always

      - name: Upload artifacts (fallback)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-windows-debug
          path: |
            dist/electron/Packaged/*
            dist/electron/UnPackaged/*
          if-no-files-found: warn

  create-release:
    name: Create Release
    needs: [check-version, build]
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if ! git rev-parse "${{ needs.check-version.outputs.tag_name }}" >/dev/null 2>&1; then
            git tag ${{ needs.check-version.outputs.tag_name }}
            git push origin ${{ needs.check-version.outputs.tag_name }}
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.tag_name }}
          name: "🚀 MobilTrack ${{ needs.check-version.outputs.tag_name }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 📱 MobilTrack ${{ needs.check-version.outputs.tag_name }}

            ### 📦 Descarga disponible:
            - **Windows**: Descarga el archivo `.exe` para instalación

            ### 🔄 Actualización automática
            Esta versión incluye actualizaciones automáticas integradas.

            ### 🛠️ Instalación
            1. Descarga el archivo `.exe`
            2. Ejecuta el instalador
            3. La aplicación se iniciará automáticamente

            ---
            *Generado automáticamente por GitHub Actions*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  notify:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [check-version, build, create-release]
    if: always()
    steps:
      - name: Success notification
        if: needs.create-release.result == 'success'
        run: |
          echo "🎉 Build completado exitosamente!"
          echo "📱 MobilTrack ${{ needs.check-version.outputs.tag_name }} está listo"
          echo "🔗 Revisa el release en: https://github.com/${{ github.repository }}/releases"

      - name: Failure notification
        if: needs.build.result == 'failure'
        run: |
          echo "❌ Build falló"
          echo "📋 Revisa los logs para más detalles"

      - name: No changes notification
        if: needs.check-version.outputs.version_changed == 'false'
        run: |
          echo "ℹ️ No se detectaron cambios de versión"
          echo "💡 Para generar un release:"
          echo "   1. Cambia la versión en package.json"
          echo "   2. O ejecuta el workflow manualmente"
